'use client';

import {
  AlertTriangle,
  CheckCircle2,
  FileVideo,
  Loader2,
  Share2,
  Sparkles,
  UploadCloud,
  Users,
  X,
} from 'lucide-react';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { generateHashtagsAction } from '@/app/actions';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './ui/card';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from './ui/form';
import { Input } from './ui/input';
import { Progress } from './ui/progress';
import { Textarea } from './ui/textarea';
import { Checkbox } from './ui/checkbox';
import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';
import { Label } from './ui/label';
import { useAccounts } from '@/context/accounts-context';

const formSchema = z.object({
  description: z.string().min(1, 'Description is required.'),
  video: z.instanceof(File).refine(file => file.size > 0, 'A video file is required.'),
});

export default function UploadForm() {
  const [file, setFile] = useState<File | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [hashtags, setHashtags] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  
  const { accounts } = useAccounts();
  const [selectedAccounts, setSelectedAccounts] = useState<string[]>([]);

  // Pre-select all accounts by default and sync selection when accounts change
  useEffect(() => {
    const accountIds = accounts.map(a => a.id);
    setSelectedAccounts(prevSelected => {
      // Get a set of the current account IDs for quick lookups
      const currentAccountIds = new Set(accountIds);
      // Filter the previous selection to only include accounts that still exist
      const validPrevSelected = prevSelected.filter(id => currentAccountIds.has(id));
      
      // Add any new accounts that weren't previously selected
      const newAccountsToAdd = accountIds.filter(id => !prevSelected.includes(id));
      
      return [...validPrevSelected, ...newAccountsToAdd];
    });
  }, [accounts]);


  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { description: '' },
  });
  
  const handleFileChange = (selectedFile: File | null) => {
    if (selectedFile) {
        if (selectedFile.type.startsWith('video/')) {
            setFile(selectedFile);
            form.setValue('video', selectedFile, { shouldValidate: true });
        } else {
            toast({
              variant: 'destructive',
              title: 'Invalid File Type',
              description: 'Please upload a valid video file.',
            });
        }
    }
  };

  const handleDragEvents = (e: React.DragEvent<HTMLDivElement>, over: boolean) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(over);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    handleDragEvents(e, false);
    const droppedFile = e.dataTransfer.files[0];
    handleFileChange(droppedFile);
  };
  
  const clearFile = () => {
    setFile(null);
    if(fileInputRef.current) fileInputRef.current.value = "";
    // @ts-ignore zod is expecting a File, but we're clearing it.
    form.setValue('video', undefined, { shouldValidate: true });
  }

  const handleGenerateHashtags = async () => {
    if (!file || !form.getValues('description')) {
      toast({
        variant: 'destructive',
        title: 'Missing Information',
        description: 'Please select a video and add a description first.',
      });
      return;
    }

    setIsGenerating(true);
    try {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = async () => {
        const base64data = reader.result as string;
        const result = await generateHashtagsAction(base64data, form.getValues('description'));
        setHashtags(result);
        toast({
          title: 'Success!',
          description: 'Hashtags generated by AI.',
          icon: <Sparkles className="h-5 w-5 text-primary" />,
        });
      };
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Generation Failed',
        description: error instanceof Error ? error.message : 'An unknown error occurred.',
      });
    } finally {
      setIsGenerating(false);
    }
  };
  
  const removeHashtag = (tagToRemove: string) => {
    setHashtags(prev => prev.filter(tag => tag !== tagToRemove));
  }
  
  const handleAccountSelection = (accountId: string) => {
    setSelectedAccounts(prev => 
      prev.includes(accountId)
        ? prev.filter(id => id !== accountId)
        : [...prev, accountId]
    );
  }

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    if (selectedAccounts.length === 0) {
      toast({ variant: 'destructive', title: 'No accounts selected', description: 'Please select at least one account to upload to.' });
      return;
    }
    
    setIsUploading(true);
    setUploadProgress(0);

    const progressInterval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 95) {
          return prev;
        }
        return prev + 5;
      });
    }, 200);

    // Simulate network delay
    setTimeout(() => {
      clearInterval(progressInterval);
      setUploadProgress(100);

      // Simulate success
      const isSuccess = Math.random() > 0.1; // 90% success rate

      if (isSuccess) {
        toast({
          title: 'Upload Complete!',
          description: 'Your video has been shared successfully.',
          icon: <CheckCircle2 className="h-5 w-5 text-green-500" />,
        });
        form.reset();
        setFile(null);
        setHashtags([]);
        setSelectedAccounts(accounts.map(a => a.id));

      } else {
        toast({
          variant: 'destructive',
          title: 'Upload Failed',
          description: 'Something went wrong. Please try again.',
          icon: <AlertTriangle className="h-5 w-5" />,
        });
      }

      setIsUploading(false);
      setTimeout(() => setUploadProgress(0), 1000);
    }, 4000);
  };

  return (
    <Card className="w-full shadow-lg">
      <CardHeader>
        <CardTitle className="font-headline text-2xl">Create New Post</CardTitle>
        <CardDescription>Upload your video and share it with the world.</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6">
            <FormField
                name="video"
                control={form.control}
                render={({ field }) => (
                    <FormItem>
                        <FormLabel>Video File</FormLabel>
                        <FormControl>
                            <div>
                                <div
                                    className={cn(
                                    "relative flex flex-col items-center justify-center w-full p-8 border-2 border-dashed rounded-lg cursor-pointer hover:bg-secondary transition-colors",
                                    isDragOver && "border-primary bg-secondary"
                                    )}
                                    onClick={() => fileInputRef.current?.click()}
                                    onDragOver={(e) => handleDragEvents(e, true)}
                                    onDragLeave={(e) => handleDragEvents(e, false)}
                                    onDrop={handleDrop}
                                >
                                    <UploadCloud className="w-10 h-10 text-muted-foreground mb-2" />
                                    <p className="text-center text-muted-foreground">
                                    <span className="font-semibold text-primary">Click to upload</span> or drag and drop
                                    </p>
                                    <p className="text-xs text-muted-foreground">MP4, MOV, AVI (max 100MB)</p>
                                    <Input
                                    {...field}
                                    ref={fileInputRef}
                                    type="file"
                                    className="hidden"
                                    accept="video/*"
                                    onChange={(e) => handleFileChange(e.target.files?.[0] || null)}
                                    />
                                </div>
                                {file && (
                                    <div className="mt-4 flex items-center justify-between p-3 bg-secondary rounded-lg">
                                        <div className='flex items-center gap-3'>
                                            <FileVideo className="w-5 h-5 text-primary" />
                                            <span className="text-sm font-medium truncate max-w-xs">{file.name}</span>
                                        </div>
                                        <Button type="button" variant="ghost" size="icon" className="h-7 w-7" onClick={clearFile}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                )}
            />

            <FormField
              name="description"
              control={form.control}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Tell us about your video..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="space-y-2">
                <FormLabel>AI Hashtags</FormLabel>
                <div className="flex flex-col sm:flex-row gap-2">
                    <div className="w-full p-2 border rounded-md min-h-[60px] bg-secondary/50 flex flex-wrap gap-2 items-center">
                        {hashtags.length === 0 && !isGenerating && (
                            <p className="text-sm text-muted-foreground p-2">Click generate to get AI-powered hashtags!</p>
                        )}
                        {isGenerating && <Loader2 className="w-5 h-5 animate-spin mx-auto text-primary" />}
                        {hashtags.map(tag => (
                            <Badge key={tag} variant="default" className="text-sm bg-primary/20 text-primary hover:bg-primary/30">
                                {tag}
                                <button type="button" onClick={() => removeHashtag(tag)} className="ml-1.5 rounded-full outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
                                    <X className="h-3 w-3" />
                                </button>
                            </Badge>
                        ))}
                    </div>
                    <Button type="button" variant="outline" onClick={handleGenerateHashtags} disabled={isGenerating || !file || !form.getValues('description')} className="shrink-0">
                        {isGenerating ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Sparkles className="w-4 h-4 mr-2" />}
                        Generate
                    </Button>
                </div>
            </div>

            <div className="space-y-3">
                <Label>Connect & Share</Label>
                 {accounts.length > 0 ? (
                    <div className="space-y-2">
                        {accounts.map((account) => (
                            <div key={account.id} className="flex items-center space-x-3 bg-secondary/50 p-3 rounded-md">
                                <Checkbox id={`upload-${account.id}`} checked={selectedAccounts.includes(account.id)} onCheckedChange={() => handleAccountSelection(account.id)} />
                                <Avatar className="h-8 w-8">
                                    <AvatarImage src={account.avatar} alt={account.name} data-ai-hint="avatar social media" />
                                    <AvatarFallback>{account.platform.slice(0, 2)}</AvatarFallback>
                                </Avatar>
                                <div className="flex-grow cursor-pointer" onClick={() => handleAccountSelection(account.id)}>
                                    <Label htmlFor={`upload-${account.id}`} className="font-medium cursor-pointer">{account.name}</Label>
                                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                        <span>{account.platform}</span>
                                        <span className="text-xs">•</span>
                                        <div className="flex items-center gap-1">
                                            <Users className="h-3 w-3" />
                                            <span>{account.followers} Followers</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                 ) : (
                    <p className="text-sm text-muted-foreground text-center py-4 bg-secondary/50 rounded-md">
                        Please add an account in the "Connected Accounts" section below to share your video.
                    </p>
                 )}
            </div>

            {isUploading && (
              <div className="space-y-2 pt-2">
                <Label>Uploading...</Label>
                <Progress value={uploadProgress} className="w-full" />
                <p className='text-sm text-muted-foreground text-center'>{Math.round(uploadProgress)}%</p>
              </div>
            )}
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full bg-accent hover:bg-accent/90 text-accent-foreground" disabled={isUploading || isGenerating || accounts.length === 0}>
              {isUploading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Share2 className="mr-2 h-4 w-4" />}
              {isUploading ? 'Sharing...' : 'Upload & Share'}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}
